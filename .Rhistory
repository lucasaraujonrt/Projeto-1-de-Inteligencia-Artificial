geom_point() +
xlab("Dias da Semana") +
ylab("Quantidade de Ocorrencias")
grafBar <- ggplot(crimes, aes(DAY_OF_WEEK, Count, fill = OFFENSE_CODE_GROUP))
grafBar + geom_bar(stat = "identity")
ggplot(whereCrimesOccur, aes(Long, Lat, col=OFFENSE_CODE_GROUP)) +
geom_point(na.rm = TRUE) +
xlim(-70.99, -71.18) +
ylim(42.225, 42.40)
whereLarceny <- filter(dataCrime, OFFENSE_CODE_GROUP %in% c("Larceny"))
ggplot(whereLarceny, aes(Long, Lat, col="Larceny"))+
geom_point(na.rm = TRUE)+
xlim(-70.99, -71.18)+
ylim(42.225, 42.40)
ggplot(whereDrug, aes(x=YEAR)) +
geom_line(stat = 'count', aes(group=OFFENSE_CODE_GROUP, colour=OFFENSE_CODE_GROUP))
barCrimes <- dataCrime_filter %>%
group_by(DAY_OF_WEEK, OFFENSE_CODE_GROUP) %>%
summarise("Count" = n()) %>%
arrange(desc(Count))
ggplot(barCrimes, aes(x=DAY_OF_WEEK,y=Count, fill = OFFENSE_CODE_GROUP, group=OFFENSE_CODE_GROUP)) +
geom_bar(stat = "identity", position = "dodge")
barCrimes <- dataCrime_filter %>%
group_by(DAY_OF_WEEK, OFFENSE_CODE_GROUP) %>%
summarise("Count" = n()) %>%
arrange(desc(Count))
dataCrime_filter <- filter(dataCrime, OFFENSE_CODE_GROUP%in%c('Homicide', 'Drug Violation', 'Larceny'))
barCrimes <- dataCrime_filter %>%
group_by(DAY_OF_WEEK, OFFENSE_CODE_GROUP) %>%
summarise("Count" = n()) %>%
arrange(desc(Count))
ggplot(barCrimes, aes(x=DAY_OF_WEEK,y=Count, fill = OFFENSE_CODE_GROUP, group=OFFENSE_CODE_GROUP)) +
geom_bar(stat = "identity", position = "dodge")
barCrimes <- dataCrime_filter %>%
group_by(HOUR, OFFENSE_CODE_GROUP) %>%
summarise("Count" = n()) %>%
arrange(desc(Count))
library(dplyr)
library(dslabs)
library(ggplot2)
library(tidyverse)
barCrimes <- dataCrime_filter %>%
group_by(DAY_OF_WEEK, OFFENSE_CODE_GROUP) %>%
summarise("Count" = n()) %>%
arrange(desc(Count))
library(tidyverse)
ggplot(barCrimes, aes(x=DAY_OF_WEEK,y=Count, fill = OFFENSE_CODE_GROUP, group=OFFENSE_CODE_GROUP)) +
geom_bar(stat = "identity", position = "dodge")
ggplot(barCrimes, aes(x=HOUR,y=Count, fill = OFFENSE_CODE_GROUP, group=OFFENSE_CODE_GROUP)) +
geom_bar(stat = "identity", position = "dodge")
barCrimes <- dataCrime_filter %>%
group_by(HOUR, OFFENSE_CODE_GROUP) %>%
summarise("Count" = n()) %>%
arrange(desc(Count))
ggplot(barCrimes, aes(x=HOUR,y=Count, fill = OFFENSE_CODE_GROUP, group=OFFENSE_CODE_GROUP)) +
geom_bar(stat = "identity", position = "dodge")
library(class)
library(rpart)
library(rpart.plot)
install.packages("rpart")
install.packages("rpart.plot")
setwd('E:\\faculdade\\Inteligencia artificial');
data <-read.csv("wdbc.names", header= FALSE, sep=",");
View(data)
namesCol<-c("ID", "Diagnosis",
"Mean_Radius", "Mean_Texture",
"Mean_Perimeter", "Mean_Area",
"Mean_Smoothness", "Mean_Compactness",
"Mean_Concavity", "Mean_Concave_Points",
"Mean_Symmetry", "Mean_Fractal_Dimension",
"SE_Radius", "SE_Texture", "SE_Perimeter",
"SE_Area", "SE_Smoothness", "SE_Compactness",
"SE_Concavity", "SE_Concave_Points", "SE_Symmetry",
"SE_Fractal_Dimension", "Worst_Radius", "Worst_Texture",
"Worst_Perimeter", "Worst_Area", "Worst_Smoothness",
"Worst_Compactness", "Worst_Concavity", "Worst_Concave_Points",
"Worst_Symmetry", "Worst_Fractal_Dimension");
for(i in 1:length(namesCol))
{
names(cancer)[names(cancer)==paste0("V",i)]<- namesCol[i]
}
for(i in 1:length(namesCol))
{
names(data)[names(data)==paste0("V",i)]<- namesCol[i]
}
View(data)
columnName<-c("ID", "Diagnosis",
"Mean_Radius", "Mean_Texture",
"Mean_Perimeter", "Mean_Area",
"Mean_Smoothness", "Mean_Compactness",
"Mean_Concavity", "Mean_Concave_Points",
"Mean_Symmetry", "Mean_Fractal_Dimension",
"SE_Radius", "SE_Texture", "SE_Perimeter",
"SE_Area", "SE_Smoothness", "SE_Compactness",
"SE_Concavity", "SE_Concave_Points", "SE_Symmetry",
"SE_Fractal_Dimension", "Worst_Radius", "Worst_Texture",
"Worst_Perimeter", "Worst_Area", "Worst_Smoothness",
"Worst_Compactness", "Worst_Concavity", "Worst_Concave_Points",
"Worst_Symmetry", "Worst_Fractal_Dimension")
for(i in 1:length(columnName))
{
names(data)[names(data)==paste0("V",i)]<- columnName[i]
}
View(data)
data <-read.csv("wdbc.data", header= FALSE, sep=",");
View(data)
columnName<-c("ID", "Diagnosis",
"Mean_Radius", "Mean_Texture",
"Mean_Perimeter", "Mean_Area",
"Mean_Smoothness", "Mean_Compactness",
"Mean_Concavity", "Mean_Concave_Points",
"Mean_Symmetry", "Mean_Fractal_Dimension",
"SE_Radius", "SE_Texture", "SE_Perimeter",
"SE_Area", "SE_Smoothness", "SE_Compactness",
"SE_Concavity", "SE_Concave_Points", "SE_Symmetry",
"SE_Fractal_Dimension", "Worst_Radius", "Worst_Texture",
"Worst_Perimeter", "Worst_Area", "Worst_Smoothness",
"Worst_Compactness", "Worst_Concavity", "Worst_Concave_Points",
"Worst_Symmetry", "Worst_Fractal_Dimension")
for(i in 1:length(columnName))
{
names(data)[names(data)==paste0("V",i)]<- columnName[i]
}
View(data)
empty <-is.na(data)
while(empty == TRUE)
newData <- data[-1]
newData <-data[-1]
empty <-is.na(data)
while(empty == TRUE)
newData <-data[-1]
which(empty == TRUE)
newData <-data[-1]
View(newData)
test <-sample(1:nrow(newData),round(0.75 * nrow(newData)))
trem <- newData[test]
trem <- newData[test,]
testData <-sample(1:nrow(newData),round(0.75 * nrow(newData)))
set<- newData[testData,]
setTest <- newData[-testData,]
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
set<- newData[testData,]
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
plot(x=set$Mean_Symmetry, y=set$Mean_Smoothness , col=set$Diagnosis)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
install.packages("ggplot2")
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
library(rpart.plot)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
set.seed(123)
testData <-sample(1:nrow(newData),round(0.75 * nrow(newData)))
set<- newData[testData,]
setTest <- newData[-testData,]
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
View(newData)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Mean_Texture)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Mean_Perimeter)
(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
plot(x=set$Mean_Radius, y=set$Mean_Perimeter , col=set$Diagnosis)
set1<- newData[testData,]
plot(x=set1$Mean_Radius, y=set1$Mean_Perimeter , col=set1$Diagnosis)
setData<- newData[testData,]
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter , col=setData$Diagnosis)
for(i in 1:length(columnName))
{
names(data)[names(data)==paste0("V",i)]<- columnName[i]
}
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter , col=setData$Diagnosis)
ggplot(setData, aes(Mean_Radius, Mean_Perimeter, color = Diagnosis)) +
geom_point()
library(ggplot2)
ggplot(setData, aes(Mean_Radius, Mean_Perimeter, color = Diagnosis)) +
geom_point()
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter , col=setData$Diagnosis)
library(plot)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter , col=setData$Diagnosis)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter , color=setData$Diagnosis)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter ,col=setData$Diagnosis)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter ,col=setData$Diagnosis)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter ,colors()=setData$Diagnosis)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter ,color=setData$Diagnosis)
View(setData)
plot(x=setData$Mean_Radius, y=setData$Mean_Perimeter ,col=setData$Diagnosis)
ggplot(setData, aes(Mean_Radius, Mean_Perimeter, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Mean_Symmetry, Mean_Smoothness, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(SE_Radius, SE_Texture, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Worst_Perimeter, "Worst_Area, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Worst_Perimeter, Worst_Area, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Worst_Perimeter, Worst_Area, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Mean_Symmetry, Mean_Smoothness, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Worst_Perimeter, Worst_Area, color = Diagnosis)) +
geom_point()
columnName<-c("ID", "Diagnosis",
"Mean_Radius", "Mean_Texture",
"Mean_Perimeter", "Mean_Area",
"Mean_Smoothness", "Mean_Compactness",
"Mean_Concavity", "Mean_Concave_Points",
"Mean_Symmetry", "Mean_Fractal_Dimension",
"SE_Radius", "SE_Texture", "SE_Perimeter",
"SE_Area", "SE_Smoothness", "SE_Compactness",
"SE_Concavity", "SE_Concave_Points", "SE_Symmetry",
"SE_Fractal_Dimension", "Worst_Radius", "Worst_Texture",
"Worst_Perimeter", "Worst_Area", "Worst_Smoothness",
"Worst_Compactness", "Worst_Concavity", "Worst_Concave_Points",
"Worst_Symmetry", "Worst_Fractal_Dimension")
ggplot(setData, aes(Mean_Radius, Mean_Perimeter, color = Diagnosis)) +
geom_point()
ggplot(setData, aes(Worst_Perimeter, Worst_Area, color = Worst_Smoothness)) +
geom_point()
ggplot(setData, aes(Worst_Compactness, Worst_Concavity, color = Worst_Concave_Points)) +
geom_point()
classesSet <- set[,1]
test <- set[,-1]
testSet <- set[,-1]
View(set)
classesSet <- setData[,1]
testSet <- setData[,-1]
classesTest <-setTest[,1]
testTest <-setTest[,-1]
Ks<-c(1,3,5,11)
diferenceKnn<- function(testSet,testTest,Ks)
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
classTest <-setTest[,1]
classesSet <- setData[,1]
testSet <- setData[,-1]
classTest <-setTest[,1]
testTest <-setTest[,-1]
Ks<-c(1,3,5,11)
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, test, arrayK)
{
diferenceKnn= NULL
viewSize <-length(arrayK)
for(i in 1: viewSize){
result <- Knn(Trainer, testTest,classesSet,arrayK[i])
diference <- sum((classTest==result) /length(classTest))
diferenceKnn <-c(diferenceKnn,diference)
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, test, arrayK)
{
diferenceKnn= NULL
viewSize <-length(arrayK)
for(i in 1: viewSize){
result <- Knn(Trainer, testTest,classesSet,arrayK[i])
diference <- sum((classTest==result) /length(classTest))
diferenceKnn <-c(diferenceKnn,diference)
print(paste0("k = ", arrayK[i]))
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, test, arrayK)
{
diferenceKnn= NULL
viewSize <-length(arrayK)
for(i in 1: viewSize){
result <- knn(Trainer, testTest,classesSet,arrayK[i])
diference <- sum((classTest==result) /length(classTest))
diferenceKnn <-c(diferenceKnn,diference)
print(paste0("k = ", arrayK[i]))
}
return(diferenceKnn)
}
cls
clean
clean sscreeen
clean screen
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, test, arrayK)
{
diferenceKnn= NULL
viewSize <-length(arrayK)
for(i in 1: viewSize){
result <- knn(Trainer, testTest,classesSet,arrayK[i])
diference <- sum((classTest==result) /length(classTest))
diferenceKnn <-c(diferenceKnn,diference)
print(paste0("k = ", arrayK[i]))
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
table(result)
table(classTest)
x <-table(classTest, result)
print(x)
}
return(diferenceKnn)
}
library(class)
library(class)
library(rpart)
library(rpart.plot)
library(plot)
library(ggplot2)
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
table(result)
table(classTest)
x <-table(classTest, result)
print(x)
}
return(diferenceKnn)
}
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
table(result)
table(classTest)
dif<-(sum(classTest==result)/length(classTest))
difKnn<-c(difKnn, dif)
print(paste0("k = ", vetorK[i]))
print("Matriz de confusão:")
print(table(classesTest, result))
print(paste0("Taxa de acerto:",dif))
x <-table(classTest, result)
print(x)
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
table(result)
table(classTest)
dif<-(sum(classTest==result)/length(classTest))
difKnn<-c(difKnn, dif)
print(paste0("k = ", vetorK[i]))
print("Matriz de confusão:")
print(table(classesTest, result))
print(paste0("Taxa de acerto:",dif))
x <-table(classTest, result)
print(x)
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
difKnn<-c(diferenceKnn, dif)
print(paste0("k = ", arrayK[i]))
print("Matriz de confusão:")
print(table(classTest, result))
table(result)
table(classTest)
x <-table(classTest, result)
print(x)
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
diferenceKnn<-c(diferenceKnn, dif)
print(paste0("k = ", arrayK[i]))
print("Matriz de confusão:")
print(table(classTest, result))
table(result)
table(classTest)
x <-table(classTest, result)
print(x)
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
diferenceKnn<-c(diferenceKnn, dif)
print(paste0("k = ", arrayK[i]))
print("Matriz de confusão:")
print(table(classTest, result))
print(paste0("Taxa de acerto:",dif))
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
print(paste0("k = ", arrayK[i]))
print("Matriz de confusão:")
print(table(classTest, result))
print(paste0("Taxa de acerto:",dif))
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
print(paste0("k = ", arrayK))
print("Matriz de confusão:")
print(table(classTest, result))
print(paste0("Taxa de acerto:",dif))
}
return(diferenceKnn)
}
diferenceKnn<- verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
print(paste0("Taxa de acerto:",dif))
}
return(diferenceKnn)
}
verifyKnn(testSet,testTest,Ks)
Ks<-c(1,3,5,11)
verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
dif<-(sum(classTest==result)/length(classTest))
print(paste0("Taxa de acerto:",dif))
}
}
verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
accuracy<-(sum(classTest==result)/length(classTest))
print(paste0("Taxa de acerto:",accuracy))
}
}
model <- rpart(Diagnosis~,setData, method="class", control = rpart.control(minsplit = 1))
plot <- rpart.plot(model, type=3)
model <- rpart(Diagnosis~.,setData, method="class", control = rpart.control(minsplit = 1))
plot <- rpart.plot(model, type=3)
pred <- predict(model, testTree, type="class")
table(testTree, pred)
accuracyTree <- setTest[,1]
testTree <- setTest[,-1]
pred <- predict(model, testTree, type="class")
table(testTree, pred)
accuracyTree <- setTest[,1]
testTree <- setTest[,-1]
pred <- predict(model, testTree, type="class")
table(testTree, pred)
difArv<-(sum(accuracyTree==pred)/length(accuracyTree))
accuracyTree <- setTest[,1]
testTree <- setTest[,-1]
pred <- predict(model, testTree, type="class")
table(testTree,pred)
difArv<-(sum(accuracyTree==pred)/length(accuracyTree))
accuracyTree <- setTest[,1]
testTree <- setTest[,-1]
pred <- predict(model, testTree, type="class")
table(accuracyTree,pred)
difArv<-(sum(accuracyTree==pred)/length(accuracyTree))
hitRate<-(sum(accuracyTree==pred)/length(accuracyTree))
print(paste0("Taxa de acerto:",hitRate))
#Knn
accuracy<-(sum(classTest==result)/length(classTest))
print(paste0("Taxa de acerto:",accuracy))
#Arvore
hitRate<-(sum(accuracyTree==pred)/length(accuracyTree))
print(paste0("Taxa de acerto:",hitRate))
verifyKnn(testSet,testTest,Ks)
verifyKnn <- function(Trainer, Test, arrayK)
{
for(i in arrayK){
result<-knn(Trainer, Test, classesSet, arrayK)
accuracy<-(sum(classTest==result)/length(classTest))
print(paste0("Taxa de acerto:",accuracy))
}
}
hitRate<-(sum(accuracyTree==pred)/length(accuracyTree))
print(paste0("Taxa de acerto:",hitRate))
